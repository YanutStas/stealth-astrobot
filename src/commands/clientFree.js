// –ª–æ–≥–∏–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ñ–∏—á–µ–π –∫–ª–∏–µ–Ω—Ç–∞
const axios = require("axios");
const logger = require("../logger"); // <-- NEW
const { DateTime } = require("luxon");

// —Ä–µ–≥—É–ª—è—Ä–∫–∞ ¬´–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –ì–æ—Ä–æ–¥¬ª
const natalReg = /^\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+$/;

// —Å–ø–∏—Å–æ–∫ fallback-–º–æ–¥–µ–ª–µ–π
const MODEL_CHAIN = [
  process.env.ROUTER_MODEL,
  "azure-openai/gpt-3.5-turbo",
  "openrouter/auto",
  "mistralai/mistral-7b-instruct",
  "anthropic/claude-3-haiku-20240307",
].filter(Boolean);

module.exports = (bot) => {
  // /start
  bot.start((ctx) => {
    ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî AstroBot üåü\n\n–ß—Ç–æ–±—ã —è —Å–æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É, –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\nüìÖ –î–î.–ú–ú.–ì–ì–ì–ì ‚è∞ –ß–ß:–ú–ú üó∫Ô∏è –ì–æ—Ä–æ–¥\n\n–ù–∞–ø—Ä.: 01.01.2000 10:00 –ú–æ—Å–∫–≤–∞\n\n‚ú® –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ‚Äî –≤–≤–µ–¥–∏ /compat`
    );
  });

  // –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
  bot.hears(natalReg, async (ctx) => {
    const tsStart = Date.now();
    const { id, username, first_name, last_name } = ctx.from;

    // –ª–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info(
      {
        userId: id,
        user: username || `${first_name || ""} ${last_name || ""}`.trim(),
        text: ctx.message.text,
        at: DateTime.local().toISO(),
      },
      "üì• –ó–∞–ø—Ä–æ—Å –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"
    );

    await ctx.reply("üî≠ –°–æ—Å—Ç–∞–≤–ª—è—é –∫–∞—Ä—Ç—É –∑–≤—ë–∑–¥...");

    const userInput = ctx.message.text.trim();
    const prompt = `–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞, —Ä–æ–¥–∏–≤—à–µ–≥–æ—Å—è ${userInput}. –£–∫–∞–∂–∏:

‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ ‚Äî –∑–Ω–∞–∫ –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏–µ
üåô –õ—É–Ω–∞ ‚Äî –∑–Ω–∞–∫ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
üß† –ú–µ—Ä–∫—É—Ä–∏–π ‚Äî —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è
üî• –ú–∞—Ä—Å ‚Äî —ç–Ω–µ—Ä–≥–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è

–ù–µ —É–ø–æ–º–∏–Ω–∞–π –ª—é–±–æ–≤—å, —Å–µ–∫—Å, –¥–µ–Ω—å–≥–∏, —Ñ–∏–Ω–∞–Ω—Å—ã, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –≤–µ–Ω–µ—Ä—É –∏ 12 –¥–æ–º. –ì–æ–≤–æ—Ä–∏ —Ç–µ–ø–ª–æ, –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏, –±–µ–∑ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏, –≥–æ–≤–æ—Ä–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.

–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –≤—ã–≤–æ–¥:
‚Äî
‚ú® –í –∏—Ç–æ–≥–µ: ... (–≥–ª–∞–≤–Ω—ã–π –∏—Ç–æ–≥ –æ —á–µ–ª–æ–≤–µ–∫–µ)
`;

    let sent = false;
    let lastErr = null;

    for (const model of MODEL_CHAIN) {
      try {
        const { data } = await axios.post(
          "https://openrouter.ai/api/v1/chat/completions",
          {
            model,
            messages: [
              {
                role: "system",
                content:
                  "–¢—ã –∞—Å—Ç—Ä–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–º–∞–π–ª–∏–∫–∏, –ø–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —à–∞–±–ª–æ–Ω–µ.",
              },
              { role: "user", content: prompt },
            ],
          },
          {
            headers: {
              Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
              "HTTP-Referer": `https://t.me/${process.env.BOT_USERNAME}`,
              "Content-Type": "application/json",
            },
          }
        );

        const out =
          data.choices?.[0]?.message?.content?.trim() ||
          "üåå –ó–≤—ë–∑–¥—ã –º–æ–ª—á–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.";

        await ctx.reply(out);

        logger.info(
          {
            userId: id,
            model,
            ms: Date.now() - tsStart,
          },
          "üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
        );

        sent = true;
        break;
      } catch (e) {
        lastErr = e;
        logger.warn(
          { model, err: e.response?.status || e.message },
          "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å"
        );
      }
    }

    if (!sent) {
      logger.error(
        { userId: id, err: lastErr?.response?.data || lastErr?.message },
        "‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ —É–ø–∞–ª–∏"
      );
      ctx.reply("üõ†Ô∏è –ó–≤—ë–∑–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
    }
  });
};
