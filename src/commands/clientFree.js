// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// FREE ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–∞—Ç–∞–ª–∫–∞ (–±–µ–∑ –ª—é–±–≤–∏, –¥–µ–Ω–µ–≥, —Å–æ–≤–º–µ—Å—Ç-—Ç–∏)
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const axios = require("axios");
const { DateTime } = require("luxon");
const { Markup } = require("telegraf");
const logger = require("../logger");

// ‚îÄ‚îÄ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
const natalReg = /^\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+$/;
const isValidNatal = (t) => {
  if (!natalReg.test(t.trim())) return false;
  const [d, tm] = t.split(/\s+/);
  return DateTime.fromFormat(`${d} ${tm}`, "dd.MM.yyyy HH:mm").isValid;
};

// ‚îÄ‚îÄ fallback-—Ü–µ–ø–æ—á–∫–∞
const MODELS = [
  "openrouter/auto",
  "mistralai/mistral-7b-instruct",
  "anthropic/claude-3-haiku-20240307",
];

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
module.exports = (bot) => {
  // /start —Å –ø—Ä–æ–≥—Ä–µ–≤–æ–º
  bot.start((ctx) => {
    const name = ctx.from.first_name || "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –¥—Ä—É–≥";
    const appeal =
      name.endsWith("–∞") || name.endsWith("—è") ? "–∫—Ä–∞—Å–æ—Ç–∫–∞" : "–∏—Å–∫–∞—Ç–µ–ª—å";

    ctx.reply(
      `üåå –ü—Ä–∏–≤–µ—Ç, ${appeal} ${name}! –Ø AstroSelf ‚Äî –∫–∞—Ä–º–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø–æ –∑–≤—ë–∑–¥–∞–º.\n` +
        `–í—ã–±–µ—Ä–∏, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üëá`,
      Markup.inlineKeyboard([
        [Markup.button.callback("üîÆ –û–±—â–∞—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)", "natal_start")],
        [Markup.button.callback("üíû –õ—é–±–æ–≤—å (–ø–ª–∞—Ç–Ω–æ)", "love_start")],
        [Markup.button.callback("üíº –ö–∞—Ä—å–µ—Ä–∞ (–ø–ª–∞—Ç–Ω–æ)", "career_start")],
        [Markup.button.callback("‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–ø–ª–∞—Ç–Ω–æ)", "compat_start")],
      ])
    );
  });

  // –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
  bot.action("natal_start", async (ctx) => {
    await ctx.answerCbQuery();
    ctx.reply(
      "–ß—Ç–æ–±—ã —è —Å–æ—Å—Ç–∞–≤–∏–ª –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É, –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É:\n\n" +
        "üìÖ –î–î.–ú–ú.–ì–ì–ì–ì   ‚è∞ –ß–ß:–ú–ú   üó∫ –ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è\n\n" +
        "–ü—Ä–∏–º–µ—Ä: 01.01.2000 10:00 –ú–æ—Å–∫–≤–∞"
    );
  });

  // —Ä–∞—Å—á—ë—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
  bot.hears(isValidNatal, async (ctx) => {
    const t0 = Date.now();
    const u = ctx.from.username || ctx.from.id;
    logger.info(`[free-req] @${u}: ${ctx.message.text}`);

    await ctx.reply("üî≠ –°–∫–∞–Ω–∏—Ä—É—é –∑–≤—ë–∑–¥—ã‚Ä¶");

    const prompt =
      `–ù–∞–ø–∏—à–∏ —ë–º–∫—É—é (‚â§ 1200 —Å–∏–º–≤.) –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞, —Ä–æ–¥–∏–≤—à–µ–≥–æ—Å—è ${ctx.message.text.trim()}.\n` +
      "–í—ã–≤–µ–¥–∏ *—Å–µ–º—å* –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤, –∫–∞–∂–¥—ã–π –¥–æ —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫:\n" +
      "1. ‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ ‚Äî –±–∞–∑–∞ –ª–∏—á–Ω–æ—Å—Ç–∏\n" +
      "2. üåô –õ—É–Ω–∞ ‚Äî —ç–º–æ—Ü–∏–∏\n" +
      "3. ü°± –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç ‚Äî –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ\n" +
      "4. üí† –°–µ–≤. —É–∑–µ–ª ‚Äî –∫–∞—Ä–º–∞-–∫—É—Ä—Å\n" +
      "5. üé® –¢–∞–ª–∞–Ω—Ç—ã –∏ —Ö–æ–±–±–∏\n" +
      "6. üßò –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ä–µ—Å—É—Ä—Å\n" +
      "7. üåÄ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç\n\n" +
      "–ù–µ —É–ø–æ–º–∏–Ω–∞–π –ª—é–±–æ–≤—å/–±—Ä–∞–∫/—Å–µ–∫—Å/—Å–µ–º—å—é/–¥–µ—Ç–µ–π/–∫–∞—Ä—å–µ—Ä—É/–¥–µ–Ω—å–≥–∏/—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å/–í–µ–Ω–µ—Ä—É/12 –¥–æ–º.\n" +
      "–ë–µ–∑ markdown-–∑–≤—ë–∑–¥–æ—á–µ–∫, —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —ç–º–æ–¥–∑–∏.\n\n" +
      "–ó–∞–∫—Ä–æ–π –≤—ã–≤–æ–¥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π:\n" +
      "‚Äî\n" +
      "‚ú® –í –∏—Ç–æ–≥–µ: (–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)\n\n" +
      "–ü–æ—Å–ª–µ –∏—Ç–æ–≥–∞ –¥–æ–±–∞–≤—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É:\n" +
      "üíé –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ª—é–±–≤–∏, –¥–µ–Ω—å–≥–∞—Ö –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏? –ñ–º–∏ –∫—Ä–∞—Å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ!";

    let ok = false,
      err;
    for (const model of MODELS) {
      try {
        const { data } = await axios.post(
          "https://openrouter.ai/api/v1/chat/completions",
          { model, messages: [{ role: "user", content: prompt }] },
          {
            headers: {
              Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
              "HTTP-Referer": `https://t.me/${process.env.BOT_USERNAME}`,
              "Content-Type": "application/json",
            },
          }
        );
        await ctx.reply(
          data.choices?.[0]?.message?.content?.trim() || "üåå –ó–≤—ë–∑–¥—ã –º–æ–ª—á–∞—Ç‚Ä¶"
        );
        logger.info(`[free-ok ] @${u}: ${model} | ${Date.now() - t0} –º—Å`);
        ok = true;
        break;
      } catch (e) {
        err = e;
        logger.warn(`[free-sw ] ${model} ‚áí ${e.response?.status || e.message}`);
      }
    }
    if (!ok) {
      logger.error(`[free-fail] @${u}: ${err?.message}`);
      ctx.reply("üõ†Ô∏è –ö–æ—Å–º–æ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
    }
  });

  // fallback-–æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  bot.on("text", (ctx, n) =>
    isValidNatal(ctx.message.text)
      ? n()
      : ctx.reply("ü§î –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä:\n01.01.2000 10:00 –ú–æ—Å–∫–≤–∞")
  );
};

// // –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞)

// const axios = require("axios");
// const { DateTime } = require("luxon");
// const { Markup } = require("telegraf");
// const logger = require("../logger");

// // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–∞–ª–∏–¥–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// const natalReg = /^\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+$/;
// function isValidNatal(text) {
//   if (!natalReg.test(text.trim())) return false;
//   const [dateStr, timeStr] = text.split(/\s+/);
//   const dt = DateTime.fromFormat(`${dateStr} ${timeStr}`, "dd.MM.yyyy HH:mm");
//   return dt.isValid;
// }

// // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¶–µ–ø–æ—á–∫–∞ –º–æ–¥–µ–ª–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// const MODEL_CHAIN = [
//   "openrouter/auto",
//   "mistralai/mistral-7b-instruct",
//   "anthropic/claude-3-haiku-20240307",
// ];

// // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// module.exports = (bot) => {
//   // /start ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∫–Ω–æ–ø–∫–∏
//   bot.start((ctx) => {
//     ctx.reply(
//       "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ:",
//       Markup.inlineKeyboard([
//         [Markup.button.callback("üîÆ –û–±—â–∞—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)", "natal_start")],
//         [Markup.button.callback("‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–ø–ª–∞—Ç–Ω–æ)", "compat_start")],
//       ])
//     );
//   });

//   // –∫–Ω–æ–ø–∫–∞ ¬´–û–±—â–∞—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)¬ª
//   bot.action("natal_start", async (ctx) => {
//     await ctx.answerCbQuery();
//     ctx.reply(
//       "–ß—Ç–æ–±—ã —è —Å–æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É, –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n" +
//         "üìÖ –î–î.–ú–ú.–ì–ì–ì–ì ‚è∞ –ß–ß:–ú–ú üó∫Ô∏è –ì–æ—Ä–æ–¥\n\n" +
//         "–ù–∞–ø—Ä.: 01.01.2000 10:00 –ú–æ—Å–∫–≤–∞"
//     );
//   });

//   // –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
//   bot.hears(isValidNatal, async (ctx) => {
//     const tsStart = Date.now();
//     const { id, username, first_name, last_name } = ctx.from;

//     logger.info(`üì• @${username || id}: ${ctx.message.text}`);

//     await ctx.reply("üî≠ –°–æ—Å—Ç–∞–≤–ª—è—é –∫–∞—Ä—Ç—É –∑–≤—ë–∑–¥...");

//     const userInput = ctx.message.text.trim();
//     const prompt = `**–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∫–∞–∫–∏–µ —è–∑—ã–∫–∏, –∫—Ä–æ–º–µ —Ä—É—Åc–∫–æ–≥–æ.** –°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞, —Ä–æ–¥–∏–≤—à–µ–≥–æ—Å—è ${userInput}. –£–∫–∞–∂–∏:

// ‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ ‚Äî –∑–Ω–∞–∫ –∏ –≤–ª–∏—è–Ω–∏–µ
// üåô –õ—É–Ω–∞ ‚Äî –∑–Ω–∞–∫ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
// üß† –ú–µ—Ä–∫—É—Ä–∏–π ‚Äî —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è
// üî• –ú–∞—Ä—Å ‚Äî —ç–Ω–µ—Ä–≥–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è

// –ù–µ —É–ø–æ–º–∏–Ω–∞–π –ª—é–±–æ–≤—å, —Å–µ–∫—Å, –¥–µ–Ω—å–≥–∏, —Ñ–∏–Ω–∞–Ω—Å—ã, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –≤–µ–Ω–µ—Ä—É –∏ 12 –¥–æ–º. –ì–æ–≤–æ—Ä–∏ —Ç–µ–ø–ª–æ, –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏, –±–µ–∑ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏, –≥–æ–≤–æ—Ä–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.

// –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –≤—ã–≤–æ–¥:
// ‚Äî
// ‚ú® –í –∏—Ç–æ–≥–µ: ... (–≥–ª–∞–≤–Ω—ã–π –∏—Ç–æ–≥ –æ —á–µ–ª–æ–≤–µ–∫–µ)
// `;

//     let sent = false;
//     let lastErr = null;

//     for (const model of MODEL_CHAIN) {
//       try {
//         const { data } = await axios.post(
//           "https://openrouter.ai/api/v1/chat/completions",
//           {
//             model,
//             messages: [
//               {
//                 role: "system",
//                 content:
//                   "–¢—ã –∞—Å—Ç—Ä–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–º–∞–π–ª–∏–∫–∏, –ø–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —à–∞–±–ª–æ–Ω–µ.",
//               },
//               { role: "user", content: prompt },
//             ],
//           },
//           {
//             headers: {
//               Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
//               "HTTP-Referer": `https://t.me/${process.env.BOT_USERNAME}`,
//               "Content-Type": "application/json",
//             },
//           }
//         );

//         const out =
//           data.choices?.[0]?.message?.content?.trim() ||
//           "üåå –ó–≤—ë–∑–¥—ã –º–æ–ª—á–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.";

//         await ctx.reply(out);

//         logger.info(
//           `üì§ @${username || id}: ${model} | ${Date.now() - tsStart} –º—Å`
//         );

//         sent = true;
//         break;
//       } catch (e) {
//         lastErr = e;
//         logger.warn(
//           { model, err: e.response?.status || e.message },
//           "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å"
//         );
//       }
//     }

//     if (!sent) {
//       logger.error(
//         { userId: id, err: lastErr?.response?.data || lastErr?.message },
//         "‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ —É–ø–∞–ª–∏"
//       );
//       ctx.reply("üõ†Ô∏è –ó–≤—ë–∑–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
//     }
//   });

//   // –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç, –Ω–æ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
//   bot.on("text", (ctx, next) => {
//     if (!isValidNatal(ctx.message.text)) {
//       return ctx.reply(
//         "ü§î –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –ì–æ—Ä–æ–¥\n–ù–∞–ø—Ä.: 01.01.2000 10:00 –ú–æ—Å–∫–≤–∞"
//       );
//     }
//     return next();
//   });
// };
