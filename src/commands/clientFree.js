// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FREE natals ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const axios = require("axios");
const { DateTime } = require("luxon");
const { Markup } = require("telegraf");
const logger = require("../logger");

// ‚Äî –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã
const natalReg = /^\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+$/;
const isValid = (t) =>
  natalReg.test(t.trim()) &&
  DateTime.fromFormat(t.split(/\s+/).slice(0, 2).join(" "), "dd.MM.yyyy HH:mm")
    .isValid;

// ‚Äî —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–≤—É—Ö –∫–∞—Ä—Ç (–Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã free-—Ö–µ–Ω–¥–ª–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞–ª)
const dualReg = /^\s*\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+?\s*&/;

// ‚Äî –º–æ–¥–µ–ª–∏
const MODELS = [
  "openrouter/auto",
  "mistralai/mistral-7b-instruct",
  "anthropic/claude-3-haiku-20240307",
];

module.exports = (bot) => {
  // /start
  bot.start((ctx) => {
    const n = ctx.from.first_name || "–¥—Ä—É–≥";
    ctx.reply(
      `üåå –ü—Ä–∏–≤–µ—Ç, ${n}! –ì–æ—Ç–æ–≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø–∞—Å–ø–æ—Ä—Ç.\n` +
        `–ö—É–¥–∞ –∑–∞–≥–ª—è–Ω–µ–º?`,
      Markup.inlineKeyboard([
        [Markup.button.callback("üîÆ –û–±—â–∞—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)", "natal_start")],
        [Markup.button.callback("üíû –õ—é–±–æ–≤—å (–ø–ª–∞—Ç–Ω–æ) –ü–û–ö–ê –•–£–Å–í–û –†–ê–ë–û–¢–ê–ï–¢", "love_start")],
        [Markup.button.callback("üíº –ö–∞—Ä—å–µ—Ä–∞ (–ø–ª–∞—Ç–Ω–æ) –ü–û–ö–ê –•–£–Å–í–û –†–ê–ë–û–¢–ê–ï–¢", "career_start")],
        [Markup.button.callback("‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–ø–ª–∞—Ç–Ω–æ)", "compat_start")],
      ])
    );
  });

  bot.action("natal_start", async (ctx) => {
    await ctx.answerCbQuery();
    ctx.reply(
      "–ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" +
        "üìÖ –î–î.MM.–ì–ì–ì–ì ‚è∞ –ß–ß:–ú–ú üó∫ –ì–æ—Ä–æ–¥\n\n" +
        "–ü—Ä–∏–º–µ—Ä: 01.01.2000 10:00 –ú–æ—Å–∫–≤–∞"
    );
  });

  // --- FREE –∞–Ω–∞–ª–∏–∑
  bot.hears(
    async (text) => isValid(text) && !dualReg.test(text),
    async (ctx) => {
      const t0 = Date.now(),
        u = ctx.from.username || ctx.from.id;
      logger.info(`[free-req] @${u}: ${ctx.message.text}`);

      await ctx.reply("üî≠ –°–∫–∞–Ω–∏—Ä—É—é –∑–≤—ë–∑–¥—ã‚Ä¶");

      const prompt = `–í—ã–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–∏–π (–¥–æ 1200 —Å–∏–º–≤.) –∞–Ω–∞–ª–∏–∑ –ø–æ 7 –ø—É–Ω–∫—Ç–∞–º.
–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–≥–æ:
1. ‚òÄÔ∏è ...
2. üåô ...
3. ü°± ...
4. üí† ...
5. üé® ...
6. üßò ...
7. üî∂ ...

–ó–∞—Ç–µ–º —Å—Ç—Ä–æ–∫–∞:
‚Äî
‚ú® –í –∏—Ç–æ–≥–µ: ...

–ë–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ª—é–±–≤–∏, –¥–µ–Ω–µ–≥, –∫–∞—Ä—å–µ—Ä—ã, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, —ç–º–æ–¥–∑–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è.
–î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è: ${ctx.message.text.trim()}`;

      let ok = false,
        err;
      for (const m of MODELS) {
        try {
          const { data } = await axios.post(
            "https://openrouter.ai/api/v1/chat/completions",
            { model: m, messages: [{ role: "user", content: prompt }] },
            {
              headers: {
                Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
                "Content-Type": "application/json",
              },
            }
          );
          await ctx.reply(
            data.choices?.[0]?.message?.content?.trim() || "üåå –ó–≤—ë–∑–¥—ã –º–æ–ª—á–∞—Ç‚Ä¶"
          );
          logger.info(`[free-ok ] @${u}|${m}|${Date.now() - t0}–º—Å`);
          ok = true;
          break;
        } catch (e) {
          err = e;
          logger.warn(`[free-swap] ${m}‚ùå`);
        }
      }
      if (!ok) {
        logger.error(`[free-fail] @${u}: ${err?.message}`);
        ctx.reply("üõ†Ô∏è –ö–æ—Å–º–æ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
      }
    }
  );

  // –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  bot.on("text", (c, n) =>
    isValid(c.message.text) || dualReg.test(c.message.text)
      ? n()
      : c.reply("ü§î –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä:\n01.01.2000 10:00 –ú–æ—Å–∫–≤–∞")
  );
};

// // –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞)

// const axios = require("axios");
// const { DateTime } = require("luxon");
// const { Markup } = require("telegraf");
// const logger = require("../logger");

// // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–∞–ª–∏–¥–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// const natalReg = /^\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+$/;
// function isValidNatal(text) {
//   if (!natalReg.test(text.trim())) return false;
//   const [dateStr, timeStr] = text.split(/\s+/);
//   const dt = DateTime.fromFormat(`${dateStr} ${timeStr}`, "dd.MM.yyyy HH:mm");
//   return dt.isValid;
// }

// // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¶–µ–ø–æ—á–∫–∞ –º–æ–¥–µ–ª–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// const MODEL_CHAIN = [
//   "openrouter/auto",
//   "mistralai/mistral-7b-instruct",
//   "anthropic/claude-3-haiku-20240307",
// ];

// // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// module.exports = (bot) => {
//   // /start ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∫–Ω–æ–ø–∫–∏
//   bot.start((ctx) => {
//     ctx.reply(
//       "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ:",
//       Markup.inlineKeyboard([
//         [Markup.button.callback("üîÆ –û–±—â–∞—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)", "natal_start")],
//         [Markup.button.callback("‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–ø–ª–∞—Ç–Ω–æ)", "compat_start")],
//       ])
//     );
//   });

//   // –∫–Ω–æ–ø–∫–∞ ¬´–û–±—â–∞—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)¬ª
//   bot.action("natal_start", async (ctx) => {
//     await ctx.answerCbQuery();
//     ctx.reply(
//       "–ß—Ç–æ–±—ã —è —Å–æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É, –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n" +
//         "üìÖ –î–î.–ú–ú.–ì–ì–ì–ì ‚è∞ –ß–ß:–ú–ú üó∫Ô∏è –ì–æ—Ä–æ–¥\n\n" +
//         "–ù–∞–ø—Ä.: 01.01.2000 10:00 –ú–æ—Å–∫–≤–∞"
//     );
//   });

//   // –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
//   bot.hears(isValidNatal, async (ctx) => {
//     const tsStart = Date.now();
//     const { id, username, first_name, last_name } = ctx.from;

//     logger.info(`üì• @${username || id}: ${ctx.message.text}`);

//     await ctx.reply("üî≠ –°–æ—Å—Ç–∞–≤–ª—è—é –∫–∞—Ä—Ç—É –∑–≤—ë–∑–¥...");

//     const userInput = ctx.message.text.trim();
//     const prompt = `**–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∫–∞–∫–∏–µ —è–∑—ã–∫–∏, –∫—Ä–æ–º–µ —Ä—É—Åc–∫–æ–≥–æ.** –°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞, —Ä–æ–¥–∏–≤—à–µ–≥–æ—Å—è ${userInput}. –£–∫–∞–∂–∏:

// ‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ ‚Äî –∑–Ω–∞–∫ –∏ –≤–ª–∏—è–Ω–∏–µ
// üåô –õ—É–Ω–∞ ‚Äî –∑–Ω–∞–∫ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
// üß† –ú–µ—Ä–∫—É—Ä–∏–π ‚Äî —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è
// üî• –ú–∞—Ä—Å ‚Äî —ç–Ω–µ—Ä–≥–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è

// –ù–µ —É–ø–æ–º–∏–Ω–∞–π –ª—é–±–æ–≤—å, —Å–µ–∫—Å, –¥–µ–Ω—å–≥–∏, —Ñ–∏–Ω–∞–Ω—Å—ã, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –≤–µ–Ω–µ—Ä—É –∏ 12 –¥–æ–º. –ì–æ–≤–æ—Ä–∏ —Ç–µ–ø–ª–æ, –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏, –±–µ–∑ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏, –≥–æ–≤–æ—Ä–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.

// –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –≤—ã–≤–æ–¥:
// ‚Äî
// ‚ú® –í –∏—Ç–æ–≥–µ: ... (–≥–ª–∞–≤–Ω—ã–π –∏—Ç–æ–≥ –æ —á–µ–ª–æ–≤–µ–∫–µ)
// `;

//     let sent = false;
//     let lastErr = null;

//     for (const model of MODEL_CHAIN) {
//       try {
//         const { data } = await axios.post(
//           "https://openrouter.ai/api/v1/chat/completions",
//           {
//             model,
//             messages: [
//               {
//                 role: "system",
//                 content:
//                   "–¢—ã –∞—Å—Ç—Ä–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–º–∞–π–ª–∏–∫–∏, –ø–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —à–∞–±–ª–æ–Ω–µ.",
//               },
//               { role: "user", content: prompt },
//             ],
//           },
//           {
//             headers: {
//               Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
//               "HTTP-Referer": `https://t.me/${process.env.BOT_USERNAME}`,
//               "Content-Type": "application/json",
//             },
//           }
//         );

//         const out =
//           data.choices?.[0]?.message?.content?.trim() ||
//           "üåå –ó–≤—ë–∑–¥—ã –º–æ–ª—á–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.";

//         await ctx.reply(out);

//         logger.info(
//           `üì§ @${username || id}: ${model} | ${Date.now() - tsStart} –º—Å`
//         );

//         sent = true;
//         break;
//       } catch (e) {
//         lastErr = e;
//         logger.warn(
//           { model, err: e.response?.status || e.message },
//           "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å"
//         );
//       }
//     }

//     if (!sent) {
//       logger.error(
//         { userId: id, err: lastErr?.response?.data || lastErr?.message },
//         "‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ —É–ø–∞–ª–∏"
//       );
//       ctx.reply("üõ†Ô∏è –ó–≤—ë–∑–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
//     }
//   });

//   // –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç, –Ω–æ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
//   bot.on("text", (ctx, next) => {
//     if (!isValidNatal(ctx.message.text)) {
//       return ctx.reply(
//         "ü§î –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –ì–æ—Ä–æ–¥\n–ù–∞–ø—Ä.: 01.01.2000 10:00 –ú–æ—Å–∫–≤–∞"
//       );
//     }
//     return next();
//   });
// };
