const axios = require("axios");
const { DateTime } = require("luxon");
const { Markup } = require("telegraf");
const logger = require("../../logger");

// –≤–∞–ª–∏–¥–Ω—ã–π —à–∞–±–ª–æ–Ω –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã
const natalReg = /^\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+$/;
const isValid = (t) =>
  natalReg.test(t.trim()) &&
  DateTime.fromFormat(t.split(/\s+/).slice(0, 2).join(" "), "dd.MM.yyyy HH:mm")
    .isValid;

// —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å –ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ¬´&¬ª
const dualReg = /&/;
const MODELS = [
  "openrouter/auto",
  "mistralai/mistral-7b-instruct",
  "anthropic/claude-3-haiku-20240307",
];

module.exports = (bot) => {
  bot.action("general_start", async (ctx) => {
    await ctx.answerCbQuery();
    ctx.reply(
      "–ß—Ç–æ–±—ã —è —Å–æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ—é *–Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É*, –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫:\n\n" +
        "üìÖ –î–î.MM.–ì–ì–ì–ì  ‚è∞ –ß–ß:–ú–ú  üó∫ –ì–æ—Ä–æ–¥\n\n" +
        "–ü—Ä–∏–º–µ—Ä: 01.01.2000 10:00 –ú–æ—Å–∫–≤–∞",
      { parse_mode: "Markdown" }
    );
  });

  // –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
  bot.hears(
    async (txt) => isValid(txt) && !dualReg.test(txt),
    async (ctx) => {
      const t0 = Date.now(),
        id = ctx.from.id,
        user = ctx.from.username || id;
      logger.info(`[free] –∑–∞–ø—Ä–æ—Å @${user}`);

      await ctx.reply("üî≠ –°–∫–∞–Ω–∏—Ä—É—é –∑–≤—ë–∑–¥—ã‚Ä¶");

      const prompt = `–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç—á—ë—Ç (–Ω–µ –±–æ–ª–µ–µ 1200 —Å–∏–º) –ø–æ 7 –ø—É–Ω–∫—Ç–∞–º:
1. ‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ ‚Äî —Ö–∞—Ä–∞–∫—Ç–µ—Ä  
2. üåô –õ—É–Ω–∞ ‚Äî —ç–º–æ—Ü–∏–∏  
3. ü°± –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç ‚Äî –≤–Ω–µ—à–Ω–µ–µ ¬´—è¬ª  
4. üîé –û–ø—ã—Ç –∏ –∑–Ω–∞–Ω–∏—è  
5. üé® –¢–∞–ª–∞–Ω—Ç—ã –∏ —Ö–æ–±–±–∏  
6. üßò –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ä–µ—Å—É—Ä—Å  
7. üåÄ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç  

–ó–∞—Ç–µ–º —Å—Ç—Ä–æ–∫–∞:
‚Äî
‚ú® –í –∏—Ç–æ–≥–µ: (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ–∑—é–º–µ)

*–ó–∞–ø—Ä–µ—â–µ–Ω–æ* —É–ø–æ–º–∏–Ω–∞—Ç—å –ª—é–±–æ–≤—å/–æ—Ç–Ω–æ—à–µ–Ω–∏—è, –¥–µ–Ω—å–≥–∏/–∫–∞—Ä—å–µ—Ä—É –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.
–¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π, –º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏.
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${ctx.message.text.trim()}`;

      let sent = false;
      for (const model of MODELS) {
        try {
          const { data } = await axios.post(
            "https://openrouter.ai/api/v1/chat/completions",
            { model, messages: [{ role: "user", content: prompt }] },
            {
              headers: {
                Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
                "Content-Type": "application/json",
              },
            }
          );
          await ctx.reply(
            data.choices?.[0]?.message?.content?.trim() +
              "\n\nüíé *–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ª—é–±–≤–∏, –¥–µ–Ω—å–≥–∞—Ö –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏?* –ù–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–ª–∞—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É!",
            { parse_mode: "Markdown" }
          );
          logger.info(`[free] ok ${model} ${Date.now() - t0}–º—Å`);
          sent = true;
          break;
        } catch {
          logger.warn(`[free] swap ${model}`);
        }
      }
      if (!sent) ctx.reply("üõ†Ô∏è –ö–æ—Å–º–æ—Å –º–æ–ª—á–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
    }
  );
};
