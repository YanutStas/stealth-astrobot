const { Markup } = require("telegraf");
const axios = require("axios");
const logger = require("../../logger");

module.exports = (bot, flowMap) => {
  const feature = "compat"; // ‚Üê –º–µ–Ω—è–µ–º –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
  const niceFeature = "–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏";
  const priceMsg = "‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–ø–ª–∞—Ç–Ω–æ)";

  // 1Ô∏è‚É£ –∫–Ω–æ–ø–∫–∞
  bot.action("compat_start", async (ctx) => {
    await ctx.answerCbQuery();
    flowMap.set(ctx.from.id, feature);

    ctx.reply(
      `üí≥ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è *${niceFeature}* –ø–µ—Ä–µ–≤–µ–¥–∏ 10 ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n` +
        "2202 2006 1234 5678\n\n" +
        "–ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —á–µ–∫ üëá",
      { parse_mode: "Markdown" }
    );
  });

  // 2Ô∏è‚É£ —Å–∞–º –∞–Ω–∞–ª–∏–∑ (–¥–≤–µ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ &)
  const dualReg =
    /^\s*(\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+?)\s*&\s*(\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+)$/;

  bot.hears(dualReg, async (ctx) => {
    if (flowMap.get(ctx.from.id) !== feature) return; // –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ
    const [, a, b] = ctx.message.text.match(dualReg);
    const u = ctx.from.username || ctx.from.id;
    logger.info(`[${feature}] –∑–∞–ø—Ä–æ—Å @${u}`);

    await ctx.reply("üíû –°–≤–µ—Ä—è—é –∑–≤—ë–∑–¥–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –ø–∞—Ä—ã‚Ä¶");

    const prompt = `–°–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ *—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏* –ø–∞—Ä—ã —Ä–æ–≤–Ω–æ –ø–æ 5 –±–ª–æ–∫–∞–º (–∫–∞–∂–¥—ã–π ‚â§3 —Å—Ç—Ä–æ–∫–∏).

1. üåü –û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –ø–∞—Ä—ã  
2. üíó –≠–º–æ—Ü–∏–∏ –∏ –±—ã—Ç  
3. üî• –ò–Ω—Ç–∏–º / —Å—Ç—Ä–∞—Å—Ç—å  
4. ü§ù –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ —Ä–æ—Å—Ç  
5. ‚ú® –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä—ë–¥  

–†—É—Å—Å–∫–∏–π —è–∑—ã–∫, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ.  
–ü–∞—Ä—Ç–Ω—ë—Ä A: ${a}  
–ü–∞—Ä—Ç–Ω—ë—Ä B: ${b}`;

    try {
      const { data } = await axios.post(
        "https://openrouter.ai/api/v1/chat/completions",
        {
          model: "openrouter/auto",
          messages: [
            { role: "system", content: "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ 5 –±–ª–æ–∫–∞–º–∏." },
            { role: "user", content: prompt },
          ],
        },
        {
          headers: {
            Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
            "Content-Type": "application/json",
          },
        }
      );
      await ctx.reply(
        data.choices?.[0]?.message?.content?.trim() || "üåå –ù–µ —É–¥–∞–ª–æ—Å—å."
      );
    } catch (e) {
      logger.error(e.message);
      ctx.reply("üõ†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
    }
  });
};
