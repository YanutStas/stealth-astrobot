const { Markup } = require("telegraf");
const axios = require("axios");
const logger = require("../../../logger");

module.exports = (bot, flowMap) => {
  const feature = "love";
  const niceFeature = "–∞–Ω–∞–ª–∏–∑ –ª—é–±–≤–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π";
  const priceBtnText = "üíï –õ—é–±–æ–≤—å (–ø–ª–∞—Ç–Ω–æ)";

  // ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  bot.action("love_start", async (ctx) => {
    await ctx.answerCbQuery();
    flowMap.set(ctx.from.id, feature);

    ctx.reply(
      `üí≥ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è *${niceFeature}* –ø–µ—Ä–µ–≤–µ–¥–∏ 10 ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n` +
        "2202 2006 1234 5678\n\n" +
        "–ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —á–µ–∫ üëá",
      { parse_mode: "Markdown" }
    );
  });

  // ‚îÄ‚îÄ –∞–Ω–∞–ª–∏–∑ –ª—é–±–≤–∏ (–æ–¥–Ω–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const natalReg = /^\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+$/;

  bot.hears(natalReg, async (ctx) => {
    if (flowMap.get(ctx.from.id) !== feature) return; // –Ω–µ—Ç –æ–ø–ª–∞—Ç—ã
    await ctx.reply("üíñ –û—Ç–∫—Ä—ã–≤–∞—é –ª—é–±–æ–≤–Ω—ã–π —Å–≤–∏—Ç–æ–∫‚Ä¶");

    const prompt = `–°–¥–µ–ª–∞–π *–ª—é–±–æ–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä* (‚âà1200 —Å–∏–º) —Ä–æ–≤–Ω–æ –ø–æ 5 –±–ª–æ–∫–∞–º:

1. üåπ –ö–∞–∫ —á–µ–ª–æ–≤–µ–∫ –ª—é–±–∏—Ç –∏ –ø—Ä–æ—è–≤–ª—è–µ—Ç —á—É–≤—Å—Ç–≤–∞  
2. üíî –û—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≤—É—à–∫–∏ –∏ —Å—Ç—Ä–∞—Ö–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö  
3. üíë –ò–¥–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –∏ —Ñ–æ—Ä–º–∞—Ç —Å–æ—é–∑–∞  
4. üïä –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∏ (2-3 —à—Ç.)  
5. üîÆ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥  

–¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π, –º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏.  
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${ctx.message.text.trim()}`;

    try {
      const { data } = await axios.post(
        "https://openrouter.ai/api/v1/chat/completions",
        {
          model: "openrouter/auto",
          messages: [{ role: "user", content: prompt }],
        },
        {
          headers: {
            Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
            "Content-Type": "application/json",
          },
        }
      );
      await ctx.reply(
        data.choices?.[0]?.message?.content?.trim() || "üåå –ù–µ –≤—ã—à–ª–æ."
      );
      logger.info(`[love] ok @${ctx.from.username || ctx.from.id}`);
    } catch (e) {
      logger.error(e.message);
      ctx.reply("üõ†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
    }
  });
};
