const { Markup } = require("telegraf");
const axios = require("axios");
const logger = require("../../../logger");
const pending = require("../../pendingStore");

module.exports = (bot, flowMap) => {
  const feature = "career";
  const niceFeature = "–∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑";
  const priceBtnText = "üíº –ö–∞—Ä—å–µ—Ä–∞ (–ø–ª–∞—Ç–Ω–æ)";

  // ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  bot.action("career_start", async (ctx) => {
    await ctx.answerCbQuery();
    flowMap.set(ctx.from.id, feature);
    pending.set(ctx.from.id, niceFeature); 

    ctx.reply(
      `üí≥ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è *${niceFeature}* –ø–µ—Ä–µ–≤–µ–¥–∏ 50 ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n` +
        "2200700977607737\n\n" +
        "–ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —á–µ–∫ üëá",
      { parse_mode: "Markdown" }
    );
  });

  // ‚îÄ‚îÄ –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—å–µ—Ä—ã (–æ–¥–Ω–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const natalReg = /^\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+$/;

  bot.hears(natalReg, async (ctx) => {
    if (flowMap.get(ctx.from.id) !== feature) return; // –Ω–µ—Ç –æ–ø–ª–∞—Ç—ã
    await ctx.reply("üìà –ß–∏—Ç–∞—é –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏‚Ä¶");

    const prompt = `–°–æ—Å—Ç–∞–≤—å *–∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑* (‚âà1200 —Å–∏–º) —Ä–æ–≤–Ω–æ –ø–æ 5 –±–ª–æ–∫–∞–º:

1. üèÜ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤ —Ä–∞–±–æ—Ç–µ  
2. ‚ö†Ô∏è –°–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –∏ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ  
3. üí∞ –ü–æ—Ç–æ–∫ –¥–µ–Ω–µ–≥ –∏ –ª—É—á—à–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞  
4. üöÄ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ / —Ñ–æ—Ä–º–∞—Ç—ã (–æ—Ñ–∏—Å, —Ñ—Ä–∏–ª–∞–Ω—Å, –±–∏–∑–Ω–µ—Å‚Ä¶)  
5. üìÖ –ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–∏–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥  

–†—É—Å—Å–∫–∏–π —è–∑—ã–∫, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏.  
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${ctx.message.text.trim()}`;

    try {
      const { data } = await axios.post(
        "https://openrouter.ai/api/v1/chat/completions",
        {
          model: "openrouter/auto",
          messages: [{ role: "user", content: prompt }],
        },
        {
          headers: {
            Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
            "Content-Type": "application/json",
          },
        }
      );
      await ctx.reply(
        data.choices?.[0]?.message?.content?.trim() || "üåå –ù–µ –≤—ã—à–ª–æ."
      );
      logger.info(`[career] ok @${ctx.from.username || ctx.from.id}`);
    } catch (e) {
      logger.error(e.message);
      ctx.reply("üõ†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
    }
  });
};
