// src/commands/Admin/admin.js
const { DateTime } = require("luxon");
const logger = require("../../logger");
const { Markup } = require("telegraf");

const ADMIN_ID = process.env.ADMIN_ID;

// –ø–∞–º—è—Ç—å: –∫—Ç–æ –∑–∞ —á—Ç–æ –ø–ª–∞—Ç–∏—Ç
// –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ Pay-–∫–æ–º–∞–Ω–¥–∞—Ö  (require('../pendingStore') –≤ career / love / compatibility)
const pending = require("../pendingStore");

module.exports = (bot) => {
  /* ---------- —á–µ–∫ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ---------- */
  bot.on(["photo", "document"], async (ctx) => {
    const user = ctx.from;
    const srv = pending.get(user.id) || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞";

    // –∫–ª–∏–µ–Ω—Ç—É
    await ctx.reply("üì© –ß–µ–∫ –ø—Ä–∏–Ω—è—Ç! –û—Ç–∫—Ä–æ—é –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.");

    // –∞–¥–º–∏–Ω—É: —Å–Ω–∞—á–∞–ª–∞ —Å–∞–º —á–µ–∫ (–ø–µ—Ä–µ—Å—ã–ª–∫–∞)
    await ctx.forwardMessage(ADMIN_ID);

    // –¥–∞–ª–µ–µ ‚Äî –ø–æ–¥–ø–∏—Å—å + –∫–Ω–æ–ø–∫–∏
    await bot.telegram.sendMessage(
      ADMIN_ID,
      `üßæ –û–ø–ª–∞—Ç–∞ –∑–∞ *${srv}* –æ—Ç @${user.username || "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"} (ID: ${
        user.id
      })`,
      {
        parse_mode: "Markdown",
        ...Markup.inlineKeyboard([
          [
            Markup.button.callback("‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", `grant_ok_${user.id}`),
            Markup.button.callback("‚úñÔ∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å", `grant_no_${user.id}`),
          ],
        ]),
      }
    );
  });

  /* ---------- –∞–¥–º–∏–Ω: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ---------- */
  bot.action(/^grant_ok_(\d+)$/, async (ctx) => {
    const userId = ctx.match[1];
    const srv = pending.get(+userId) || "–≤–∞—à–∞ —É—Å–ª—É–≥–∞";

    await ctx.answerCbQuery("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úîÔ∏è");

    // –ª–æ–≥
    logger.info(
      `[${DateTime.local().toFormat(
        "dd.MM.yyyy HH:mm:ss"
      )}]: ‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è @${userId}`
    );

    // –∫–ª–∏–µ–Ω—Ç—É
    await bot.telegram.sendMessage(
      userId,
      `‚ú® –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!\n\n–û—Ç–ª–∏—á–Ω–æ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ¬´${srv}¬ª. –ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∫–∞–∫ —è –ø—Ä–æ—Å–∏–ª —Ä–∞–Ω–µ–µ üòâ`
    );

    // –∞–¥–º–∏–Ω—É
    await ctx.editMessageText(
      `‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ ¬´${srv}¬ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω.`
    );
    pending.delete(+userId);
  });

  /* ---------- –∞–¥–º–∏–Ω: –æ—Ç–∫–ª–æ–Ω–∏—Ç—å ---------- */
  bot.action(/^grant_no_(\d+)$/, async (ctx) => {
    const userId = ctx.match[1];
    const srv = pending.get(+userId) || "—É—Å–ª—É–≥–∞";

    await ctx.answerCbQuery("–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞");

    logger.info(
      `[${DateTime.local().toFormat(
        "dd.MM.yyyy HH:mm:ss"
      )}]: ‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è @${userId}`
    );

    await bot.telegram.sendMessage(
      userId,
      "üòî –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –ø—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–µ–∫ ‚Äî –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º!"
    );

    await ctx.editMessageText(`‚ùå –û–ø–ª–∞—Ç–∞ –∑–∞ ¬´${srv}¬ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
    pending.delete(+userId);
  });
};
