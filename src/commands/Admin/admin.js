const { Markup } = require("telegraf");
const { DateTime } = require("luxon");
const logger = require("../../logger");

module.exports = (bot, flowMap) => {
  // —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –∞–¥–º–∏–Ω
  bot.on(["photo", "document"], async (ctx) => {
    const feat = flowMap.get(ctx.from.id) || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    await ctx.reply("üì© –ß–µ–∫ –ø—Ä–∏–Ω—è—Ç! –û—Ç–∫—Ä–æ—é –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.");

    await ctx.forwardMessage(process.env.ADMIN_ID);
    await bot.telegram.sendMessage(
      process.env.ADMIN_ID,
      `üßæ –ß–µ–∫ –æ—Ç @${ctx.from.username || "anon"} (ID:${ctx.from.id})\n` +
        `–ó–∞–ø—Ä–æ—à–µ–Ω–æ: *${feat.toUpperCase()}*`,
      {
        parse_mode: "Markdown",
        ...Markup.inlineKeyboard([
          [
            Markup.button.callback("‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", `grant_ok_${ctx.from.id}`),
            Markup.button.callback("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", `grant_no_${ctx.from.id}`),
          ],
        ]),
      }
    );
  });

  // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  bot.action(/^grant_ok_(\d+)$/, async (ctx) => {
    const id = ctx.match[1];
    await ctx.answerCbQuery("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
    bot.telegram.sendMessage(id, "‚ú® –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å üöÄ");
    ctx.editMessageText("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.");
    logger.info(
      `[admin] ‚úîÔ∏è ${id} ${DateTime.local().toFormat("dd.MM.yyyy HH:mm")}`
    );
  });

  // –æ—Ç–∫–∞–∑
  bot.action(/^grant_no_(\d+)$/, async (ctx) => {
    const id = ctx.match[1];
    await ctx.answerCbQuery("–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞");
    bot.telegram.sendMessage(
      id,
      "üòî –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–µ–∫, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º."
    );
    ctx.editMessageText("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.");
    logger.info(
      `[admin] ‚ùå ${id} ${DateTime.local().toFormat("dd.MM.yyyy HH:mm")}`
    );
  });
};
